---
- name: Install Wireguard packages.
  apt:
    name:
      - wireguard
      - wireguard-tools
      - qrencode # Useful for generating QR codes for mobile clients.
    state: present
  register: result
  retries: 10 # Retry because this task might fail due to unattended-upgrades.
  delay: 20
  until: result is success

- name: Ensure Wireguard configuration directories are created.
  file:
    path: "{{ item }}"
    state: directory
    mode: "0750"
  with_items:
    - "{{ wireguard_conf_dir }}"
    - "{{ wireguard_conf_dir }}/keys"
    - "{{ wireguard_conf_dir }}/configs"
    - "{{ wireguard_conf_dir }}/configs/keys"

- name: Copy existing interface and peers configuration.
  copy:
    src: "{{ wireguard_existing_configuration_path }}"
    dest: "{{ wireguard_conf_dir }}"
    mode: "0640"
  when: wireguard_existing_configuration_path is defined

- include_tasks: "{{ playbook_dir }}/../tasks/ip_forwarding.yml"
- include_tasks: "{{ playbook_dir }}/../tasks/network.yml"

- name: Check if server private key exist and create if not.
  shell: |
    set -euo pipefail
    if [ -f "{{ wireguard_conf_dir }}/keys/server" ]; then
      cat "{{ wireguard_conf_dir }}/keys/server"
    else
      wg genkey | tee "{{ wireguard_conf_dir }}/keys/server"
      chmod 0640 "{{ wireguard_conf_dir }}/keys/server"
    fi
  args:
    executable: /bin/bash
  register: register_server_private_key
  changed_when: false


- name: Check if server public key exists and create if not.
  shell: |
    set -euo pipefail
    if [ -f "{{ wireguard_conf_dir }}/keys/server.pub" ]; then
      cat "{{ wireguard_conf_dir }}/keys/server.pub"
    else
      cat "{{ wireguard_conf_dir }}/keys/server" | wg pubkey | tee "{{ wireguard_conf_dir }}/keys/server.pub"
      chmod 0640 "{{ wireguard_conf_dir }}/keys/server.pub"
    fi
  args:
    executable: /bin/bash
  register: register_server_public_key
  changed_when: false

- name: Set server private key fact.
  set_fact:
    wireguard_server_private_key: "{{ register_server_private_key.stdout }}"

- name: Set server public key fact.
  set_fact:
    wireguard_server_public_key: "{{ register_server_public_key.stdout }}"

- name: Check if peer private keys exist and create if not.
  shell: |
    set -euo pipefail
    if [ -f "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}" ]; then
      cat "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}"
    else
      wg genkey | tee "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}"
      chmod 0640 "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}"
    fi
  args:
    executable: /bin/bash
  register: register_peer_private_key
  changed_when: false
  with_items: "{{ wireguard_peers }}"

- name: Check if peer public keys exist and create if not.
  shell: |
    set -euo pipefail
    if [ -f "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}.pub" ]; then
       cat "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}.pub"
    else
      cat "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}" | wg pubkey | tee "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}.pub"
      chmod 0640 "{{ wireguard_conf_dir }}/configs/keys/{{ item.name }}.pub"
    fi
  args:
    executable: /bin/bash
  register: register_peer_public_key
  changed_when: false
  with_items: "{{ wireguard_peers }}"

- name: Set peers private keys fact.
  set_fact:
    peers_keys: "{{ peers_keys | default([]) | combine({'wireguard_private_key_' + item.item.name: item.stdout}) }}"
  with_items: "{{ register_peer_private_key.results }}"

- name: Set peers public keys fact.
  set_fact:
    peers_keys: "{{ peers_keys | default([]) | combine({'wireguard_public_key_' + item.item.name: item.stdout}) }}"
  with_items: "{{ register_peer_public_key.results }}"

- name: Generate Wireguard configuration file.
  template:
    src: "{{ playbook_dir }}/../templates/vanilla-wireguard/wg.conf.j2"
    dest: "{{ wireguard_conf_dir }}/{{ wireguard_server_interface }}.conf"
    mode: "0640"

- name: Generate peers config from template.
  template:
    src: "{{ playbook_dir }}/../templates/vanilla-wireguard/peer.conf.j2"
    dest: "{{ wireguard_conf_dir }}/configs/{{ item.name }}.conf"
    mode: "0640"
  with_items: "{{ wireguard_peers }}"

- name: Register all keep peers paths.
  find:
    paths: ["{{ wireguard_conf_dir }}/configs", "{{ wireguard_conf_dir }}/configs/keys"]
  register: found_peer_files

- name: Remove peer files that are not in the keep list.
  file:
    path: "{{ item.path }}"
    state: absent
  when: item.path | basename | regex_replace('(\.conf$|\.pub$)', '') not in wireguard_peers | map(attribute='name') | list
  with_items: ["{{ found_peer_files.files }}"]

- include_tasks: "{{ playbook_dir }}/../tasks/migrate.yml"
  when: wireguard_migration_zip_path is defined

- name: Ensure Wireguard is started and enabled at boot.
  service:
    name: "wg-quick@{{ wireguard_server_interface }}"
    state: started
    enabled: true

- name: Reload wireguard.
  shell: "wg syncconf {{ wireguard_server_interface }} <(wg-quick strip {{ wireguard_server_interface }})"
  args:
    executable: /bin/bash
  changed_when: false
